// This file is generated by kconfig_compiler from parleypractice.kcfg.
// All changes you do to this file will be lost.
#ifndef PRACTICEPREFS_H
#define PRACTICEPREFS_H

#include <kconfigskeleton.h>
#include <kdebug.h>

#include <kglobalsettings.h>
class PracticePrefs : public KConfigSkeleton
{
  public:
    class EnumPracticeTimeoutMode
    {
      public:
      enum type { Show, Continue, COUNT };
    };
    class EnumLessonEditingSelection
    {
      public:
      enum type { CurrentLesson, LessonsInQuery, AllLessons, UserFiltered, COUNT };
    };
    class EnumTestType
    {
      public:
      enum type { MixedLettersTest, ArticleTest, MultipleChoiceTest, ComparisonTest, WrittenTest, ConjugationTest, ExampleTest, SynonymTest, ParaphraseTest, AntonymTest, COUNT };
    };

    static PracticePrefs *self();
    ~PracticePrefs();

    /**
      Set In Blocking Query Tab Dialog, if checked then the Query is blocked
    */
    static
    void setBlock( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "Block" ) ))
        self()->mBlock = v;
    }

    /**
      Get In Blocking Query Tab Dialog, if checked then the Query is blocked
    */
    static
    bool block()
    {
      return self()->mBlock;
    }

    /**
      Set In Blocking Query Tab Dialog, if checked then the Query accepts an expiring time
    */
    static
    void setExpire( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "Expire" ) ))
        self()->mExpire = v;
    }

    /**
      Get In Blocking Query Tab Dialog, if checked then the Query accepts an expiring time
    */
    static
    bool expire()
    {
      return self()->mExpire;
    }

    /**
      Set Use the Leitner learning method
    */
    static
    void setAltLearn( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "AltLearn" ) ))
        self()->mAltLearn = v;
    }

    /**
      Get Use the Leitner learning method
    */
    static
    bool altLearn()
    {
      return self()->mAltLearn;
    }

    /**
      Set Append new vocabulary in a test in order of their lessons. Note that this will not be a hard transition, but a slow mix from one lesson to the next.
    */
    static
    void setTestOrderLesson( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "TestOrderLesson" ) ))
        self()->mTestOrderLesson = v;
    }

    /**
      Get Append new vocabulary in a test in order of their lessons. Note that this will not be a hard transition, but a slow mix from one lesson to the next.
    */
    static
    bool testOrderLesson()
    {
      return self()->mTestOrderLesson;
    }

    /**
      Set The number of entries that are practiced at the same time. If one of these is answered correctly another entry will be appended.
    */
    static
    void setTestNumberOfEntries( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "TestNumberOfEntries" ) ))
        self()->mTestNumberOfEntries = v;
    }

    /**
      Get The number of entries that are practiced at the same time. If one of these is answered correctly another entry will be appended.
    */
    static
    int testNumberOfEntries()
    {
      return self()->mTestNumberOfEntries;
    }

    /**
      Set Swap direction randomly
    */
    static
    void setSwapDirection( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "SwapDirection" ) ))
        self()->mSwapDirection = v;
    }

    /**
      Get Swap direction randomly
    */
    static
    bool swapDirection()
    {
      return self()->mSwapDirection;
    }

    /**
      Set Limit the time for the user to answer in a test.
    */
    static
    void setPracticeTimeout( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeTimeout" ) ))
        self()->mPracticeTimeout = v;
    }

    /**
      Get Limit the time for the user to answer in a test.
    */
    static
    bool practiceTimeout()
    {
      return self()->mPracticeTimeout;
    }

    /**
      Set Show - show the solution after the given time, Continue goes to the next question after the timeout.
    */
    static
    void setPracticeTimeoutMode( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeTimeoutMode" ) ))
        self()->mPracticeTimeoutMode = v;
    }

    /**
      Get Show - show the solution after the given time, Continue goes to the next question after the timeout.
    */
    static
    int practiceTimeoutMode()
    {
      return self()->mPracticeTimeoutMode;
    }

    /**
      Set Maximum time allowed to answer.
    */
    static
    void setPracticeTimeoutTimePerAnswer( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeTimeoutTimePerAnswer" ) ))
        self()->mPracticeTimeoutTimePerAnswer = v;
    }

    /**
      Get Maximum time allowed to answer.
    */
    static
    int practiceTimeoutTimePerAnswer()
    {
      return self()->mPracticeTimeoutTimePerAnswer;
    }

    /**
      Set Enable suggestion lists in written practice.
    */
    static
    void setSuggestions( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "Suggestions" ) ))
        self()->mSuggestions = v;
    }

    /**
      Get Enable suggestion lists in written practice.
    */
    static
    bool suggestions()
    {
      return self()->mSuggestions;
    }

    /**
      Set Count answers as right when only the accentuation is wrong.
    */
    static
    void setIgnoreAccentMistakes( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "IgnoreAccentMistakes" ) ))
        self()->mIgnoreAccentMistakes = v;
    }

    /**
      Get Count answers as right when only the accentuation is wrong.
    */
    static
    bool ignoreAccentMistakes()
    {
      return self()->mIgnoreAccentMistakes;
    }

    /**
      Set Count answers as right when only the capitalization is wrong.
    */
    static
    void setIgnoreCapitalizationMistakes( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "IgnoreCapitalizationMistakes" ) ))
        self()->mIgnoreCapitalizationMistakes = v;
    }

    /**
      Get Count answers as right when only the capitalization is wrong.
    */
    static
    bool ignoreCapitalizationMistakes()
    {
      return self()->mIgnoreCapitalizationMistakes;
    }

    /**
      Set Split translations in written practice.
    */
    static
    void setSplitTranslations( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "SplitTranslations" ) ))
        self()->mSplitTranslations = v;
    }

    /**
      Get Split translations in written practice.
    */
    static
    bool splitTranslations()
    {
      return self()->mSplitTranslations;
    }

    /**
      Set Split translations at periods.
    */
    static
    void setPeriods( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "Periods" ) ))
        self()->mPeriods = v;
    }

    /**
      Get Split translations at periods.
    */
    static
    bool periods()
    {
      return self()->mPeriods;
    }

    /**
      Set Split translations at colons.
    */
    static
    void setColons( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "Colons" ) ))
        self()->mColons = v;
    }

    /**
      Get Split translations at colons.
    */
    static
    bool colons()
    {
      return self()->mColons;
    }

    /**
      Set Split translations at semicolons.
    */
    static
    void setSemicolons( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "Semicolons" ) ))
        self()->mSemicolons = v;
    }

    /**
      Get Split translations at semicolons.
    */
    static
    bool semicolons()
    {
      return self()->mSemicolons;
    }

    /**
      Set Split translations at commas.
    */
    static
    void setCommas( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "Commas" ) ))
        self()->mCommas = v;
    }

    /**
      Get Split translations at commas.
    */
    static
    bool commas()
    {
      return self()->mCommas;
    }

    /**
      Set Enable Show More button to reveal parts of the solution in written practice.
    */
    static
    void setShowMore( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowMore" ) ))
        self()->mShowMore = v;
    }

    /**
      Get Enable Show More button to reveal parts of the solution in written practice.
    */
    static
    bool showMore()
    {
      return self()->mShowMore;
    }

    /**
      Set Enable Skip (I Know It) button in written practice.
    */
    static
    void setSkipKnownEnabled( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "SkipKnownEnabled" ) ))
        self()->mSkipKnownEnabled = v;
    }

    /**
      Get Enable Skip (I Know It) button in written practice.
    */
    static
    bool skipKnownEnabled()
    {
      return self()->mSkipKnownEnabled;
    }

    /**
      Set When the synonym instead of the word was entered, does it count as correct?
    */
    static
    void setCountSynonymsAsCorrect( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "CountSynonymsAsCorrect" ) ))
        self()->mCountSynonymsAsCorrect = v;
    }

    /**
      Get When the synonym instead of the word was entered, does it count as correct?
    */
    static
    bool countSynonymsAsCorrect()
    {
      return self()->mCountSynonymsAsCorrect;
    }

    /**
      Set Enable image display in the practice dialogs.
    */
    static
    void setPracticeImagesEnabled( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeImagesEnabled" ) ))
        self()->mPracticeImagesEnabled = v;
    }

    /**
      Get Enable image display in the practice dialogs.
    */
    static
    bool practiceImagesEnabled()
    {
      return self()->mPracticeImagesEnabled;
    }

    /**
      Set Enable sound playback in the practice dialogs.
    */
    static
    void setPracticeSoundEnabled( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeSoundEnabled" ) ))
        self()->mPracticeSoundEnabled = v;
    }

    /**
      Get Enable sound playback in the practice dialogs.
    */
    static
    bool practiceSoundEnabled()
    {
      return self()->mPracticeSoundEnabled;
    }

    /**
      Set Toggle display of the search bar.
    */
    static
    void setShowSearch( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowSearch" ) ))
        self()->mShowSearch = v;
    }

    /**
      Get Toggle display of the search bar.
    */
    static
    bool showSearch()
    {
      return self()->mShowSearch;
    }

    /**
      Set When enabled a lesson also shows entries from its sublessons.
    */
    static
    void setShowSublessonentries( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowSublessonentries" ) ))
        self()->mShowSublessonentries = v;
    }

    /**
      Get When enabled a lesson also shows entries from its sublessons.
    */
    static
    bool showSublessonentries()
    {
      return self()->mShowSublessonentries;
    }

    /**
      Set Show/hide the lesson column.
    */
    static
    void setTableLessonColumnVisible( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "TableLessonColumnVisible" ) ))
        self()->mTableLessonColumnVisible = v;
    }

    /**
      Get Show/hide the lesson column.
    */
    static
    bool tableLessonColumnVisible()
    {
      return self()->mTableLessonColumnVisible;
    }

    /**
      Set Show/hide the active column.
    */
    static
    void setTableActiveColumnVisible( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "TableActiveColumnVisible" ) ))
        self()->mTableActiveColumnVisible = v;
    }

    /**
      Get Show/hide the active column.
    */
    static
    bool tableActiveColumnVisible()
    {
      return self()->mTableActiveColumnVisible;
    }

    /**
      Set Select which lessons are displayed for editing
    */
    static
    void setLessonEditingSelection( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "LessonEditingSelection" ) ))
        self()->mLessonEditingSelection = v;
    }

    /**
      Get Select which lessons are displayed for editing
    */
    static
    int lessonEditingSelection()
    {
      return self()->mLessonEditingSelection;
    }

    /**
      Set How the main window is divided.
    */
    static
    void setMainWindowSplitter( const QList<int> & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "MainWindowSplitter" ) ))
        self()->mMainWindowSplitter = v;
    }

    /**
      Get How the main window is divided.
    */
    static
    QList<int> mainWindowSplitter()
    {
      return self()->mMainWindowSplitter;
    }

    /**
      Set The font used in the vocabulary table
    */
    static
    void setTableFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "TableFont" ) ))
        self()->mTableFont = v;
    }

    /**
      Get The font used in the vocabulary table
    */
    static
    QFont tableFont()
    {
      return self()->mTableFont;
    }

    /**
      Set The font used for phonetics
    */
    static
    void setIPAFont( const QFont & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "IPAFont" ) ))
        self()->mIPAFont = v;
    }

    /**
      Get The font used for phonetics
    */
    static
    QFont iPAFont()
    {
      return self()->mIPAFont;
    }

    /**
      Set Currently selected column
    */
    static
    void setCurrentCol( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "CurrentCol" ) ))
        self()->mCurrentCol = v;
    }

    /**
      Get Currently selected column
    */
    static
    int currentCol()
    {
      return self()->mCurrentCol;
    }

    /**
      Set Currently selected row
    */
    static
    void setCurrentRow( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "CurrentRow" ) ))
        self()->mCurrentRow = v;
    }

    /**
      Get Currently selected row
    */
    static
    int currentRow()
    {
      return self()->mCurrentRow;
    }

    /**
      Set Use your own colors
    */
    static
    void setUseGradeColors( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "UseGradeColors" ) ))
        self()->mUseGradeColors = v;
    }

    /**
      Get Use your own colors
    */
    static
    bool useGradeColors()
    {
      return self()->mUseGradeColors;
    }

    /**
      Set Colors used to display different grades
    */
    static
    void setGradeColor( int i, const QColor & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "GradeColor%1" ).arg( i ) ))
        self()->mGradeColor[i] = v;
    }

    /**
      Get Colors used to display different grades
    */
    static
    QColor gradeColor( int i )
    {
      return self()->mGradeColor[i];
    }

    /**
      Set The entry has been asked at least this often to be included in the practice.
    */
    static
    void setPracticeMinimumTimesAsked( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeMinimumTimesAsked" ) ))
        self()->mPracticeMinimumTimesAsked = v;
    }

    /**
      Get The entry has been asked at least this often to be included in the practice.
    */
    static
    int practiceMinimumTimesAsked()
    {
      return self()->mPracticeMinimumTimesAsked;
    }

    /**
      Set The entry has been asked at most this often to be included in the practice.
    */
    static
    void setPracticeMaximumTimesAsked( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeMaximumTimesAsked" ) ))
        self()->mPracticeMaximumTimesAsked = v;
    }

    /**
      Get The entry has been asked at most this often to be included in the practice.
    */
    static
    int practiceMaximumTimesAsked()
    {
      return self()->mPracticeMaximumTimesAsked;
    }

    /**
      Set The entry was answered wrong at least this often to be included in the practice.
    */
    static
    void setPracticeMinimumWrongCount( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeMinimumWrongCount" ) ))
        self()->mPracticeMinimumWrongCount = v;
    }

    /**
      Get The entry was answered wrong at least this often to be included in the practice.
    */
    static
    int practiceMinimumWrongCount()
    {
      return self()->mPracticeMinimumWrongCount;
    }

    /**
      Set The entry was answered wrong at most this often to be included in the practice.
    */
    static
    void setPracticeMaximumWrongCount( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeMaximumWrongCount" ) ))
        self()->mPracticeMaximumWrongCount = v;
    }

    /**
      Get The entry was answered wrong at most this often to be included in the practice.
    */
    static
    int practiceMaximumWrongCount()
    {
      return self()->mPracticeMaximumWrongCount;
    }

    /**
      Set The entry has at least this grade to be included in the practice (0..7).
    */
    static
    void setPracticeMinimumGrade( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeMinimumGrade" ) ))
        self()->mPracticeMinimumGrade = v;
    }

    /**
      Get The entry has at least this grade to be included in the practice (0..7).
    */
    static
    int practiceMinimumGrade()
    {
      return self()->mPracticeMinimumGrade;
    }

    /**
      Set The entry has at most this grade to be included in the practice (0..7).
    */
    static
    void setPracticeMaximumGrade( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "PracticeMaximumGrade" ) ))
        self()->mPracticeMaximumGrade = v;
    }

    /**
      Get The entry has at most this grade to be included in the practice (0..7).
    */
    static
    int practiceMaximumGrade()
    {
      return self()->mPracticeMaximumGrade;
    }

    /**
      Set Only selected word types will be included in practice.
    */
    static
    void setWordTypesInPracticeEnabled( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "WordTypesInPracticeEnabled" ) ))
        self()->mWordTypesInPracticeEnabled = v;
    }

    /**
      Get Only selected word types will be included in practice.
    */
    static
    bool wordTypesInPracticeEnabled()
    {
      return self()->mWordTypesInPracticeEnabled;
    }

    /**
      Set Selected word types for practices.
    */
    static
    void setWordTypesInPractice( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "WordTypesInPractice" ) ))
        self()->mWordTypesInPractice = v;
    }

    /**
      Get Selected word types for practices.
    */
    static
    QStringList wordTypesInPractice()
    {
      return self()->mWordTypesInPractice;
    }

    /**
      Set Selected sub word types for practices.
    */
    static
    void setSubWordTypesInPractice( const QStringList & v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "SubWordTypesInPractice" ) ))
        self()->mSubWordTypesInPractice = v;
    }

    /**
      Get Selected sub word types for practices.
    */
    static
    QStringList subWordTypesInPractice()
    {
      return self()->mSubWordTypesInPractice;
    }

    /**
      Set The language that is displayed in a test.
    */
    static
    void setQuestionLanguage( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "QuestionLanguage" ) ))
        self()->mQuestionLanguage = v;
    }

    /**
      Get The language that is displayed in a test.
    */
    static
    int questionLanguage()
    {
      return self()->mQuestionLanguage;
    }

    /**
      Set The language in which the user has to answer.
    */
    static
    void setSolutionLanguage( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "SolutionLanguage" ) ))
        self()->mSolutionLanguage = v;
    }

    /**
      Get The language in which the user has to answer.
    */
    static
    int solutionLanguage()
    {
      return self()->mSolutionLanguage;
    }

    /**
      Set Show the solution after an answer was given.
    */
    static
    void setShowSolutionAfterAnswer( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowSolutionAfterAnswer" ) ))
        self()->mShowSolutionAfterAnswer = v;
    }

    /**
      Get Show the solution after an answer was given.
    */
    static
    bool showSolutionAfterAnswer()
    {
      return self()->mShowSolutionAfterAnswer;
    }

    /**
      Set The time the solution is shown (seconds). 0 is unlimited.
    */
    static
    void setShowSolutionAfterAnswerTime( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ShowSolutionAfterAnswerTime" ) ))
        self()->mShowSolutionAfterAnswerTime = v;
    }

    /**
      Get The time the solution is shown (seconds). 0 is unlimited.
    */
    static
    int showSolutionAfterAnswerTime()
    {
      return self()->mShowSolutionAfterAnswerTime;
    }

    /**
      Set The test type that is currently selected.
    */
    static
    void setTestType( int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "TestType" ) ))
        self()->mTestType = v;
    }

    /**
      Get The test type that is currently selected.
    */
    static
    int testType()
    {
      return self()->mTestType;
    }

    /**
      Set In a comparison forms test, include adjectives.
    */
    static
    void setComparisonIncludeAdjective( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ComparisonIncludeAdjective" ) ))
        self()->mComparisonIncludeAdjective = v;
    }

    /**
      Get In a comparison forms test, include adjectives.
    */
    static
    bool comparisonIncludeAdjective()
    {
      return self()->mComparisonIncludeAdjective;
    }

    /**
      Set In a comparison forms test, include adverbs.
    */
    static
    void setComparisonIncludeAdverb( bool v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ComparisonIncludeAdverb" ) ))
        self()->mComparisonIncludeAdverb = v;
    }

    /**
      Get In a comparison forms test, include adverbs.
    */
    static
    bool comparisonIncludeAdverb()
    {
      return self()->mComparisonIncludeAdverb;
    }

    /**
      Set Amount of time different grades should be blocked
    */
    static
    void setBlockItem( int i, int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "BlockItem%1" ).arg( i ) ))
        self()->mBlockItem[i] = v;
    }

    /**
      Get Amount of time different grades should be blocked
    */
    static
    int blockItem( int i )
    {
      return self()->mBlockItem[i];
    }

    /**
      Set Amount of time after which different grades should expire
    */
    static
    void setExpireItem( int i, int v )
    {
      if (!self()->isImmutable( QString::fromLatin1 ( "ExpireItem%1" ).arg( i ) ))
        self()->mExpireItem[i] = v;
    }

    /**
      Get Amount of time after which different grades should expire
    */
    static
    int expireItem( int i )
    {
      return self()->mExpireItem[i];
    }

  protected:
    PracticePrefs();
    friend class PracticePrefsHelper;


    // PracticeOptions
    bool mBlock;
    bool mExpire;
    bool mAltLearn;
    bool mTestOrderLesson;
    int mTestNumberOfEntries;
    bool mSwapDirection;
    bool mPracticeTimeout;
    int mPracticeTimeoutMode;
    int mPracticeTimeoutTimePerAnswer;
    bool mSuggestions;
    bool mIgnoreAccentMistakes;
    bool mIgnoreCapitalizationMistakes;
    bool mSplitTranslations;
    bool mPeriods;
    bool mColons;
    bool mSemicolons;
    bool mCommas;
    bool mShowMore;
    bool mSkipKnownEnabled;
    bool mCountSynonymsAsCorrect;
    bool mPracticeImagesEnabled;
    bool mPracticeSoundEnabled;

    // Appearance
    bool mShowSearch;
    bool mShowSublessonentries;
    bool mTableLessonColumnVisible;
    bool mTableActiveColumnVisible;
    int mLessonEditingSelection;
    QList<int> mMainWindowSplitter;
    QFont mTableFont;
    QFont mIPAFont;
    int mCurrentCol;
    int mCurrentRow;
    bool mUseGradeColors;
    QColor mGradeColor[8];

    // Thresholds
    int mPracticeMinimumTimesAsked;
    int mPracticeMaximumTimesAsked;
    int mPracticeMinimumWrongCount;
    int mPracticeMaximumWrongCount;
    int mPracticeMinimumGrade;
    int mPracticeMaximumGrade;
    bool mWordTypesInPracticeEnabled;
    QStringList mWordTypesInPractice;
    QStringList mSubWordTypesInPractice;

    // PracticeManager
    int mQuestionLanguage;
    int mSolutionLanguage;
    bool mShowSolutionAfterAnswer;
    int mShowSolutionAfterAnswerTime;
    int mTestType;
    bool mComparisonIncludeAdjective;
    bool mComparisonIncludeAdverb;
    int mBlockItem[8];
    int mExpireItem[8];

  private:
};

#endif

